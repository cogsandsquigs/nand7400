namespace Nand7400 {};

interface Assembler {
	constructor(AssemblerConfig config);
	void set_config(AssemblerConfig config);
	
	[Throws=AssemblerError]
	bytes assemble([ByRef] string source);
};

[Error]
interface AssemblerError {
	Parsing(ParsingError source);
	OpcodeDNE(string mnemonic, Position span);
	LabelDNE(string mnemonic, Position span);
};

[Error]
interface ParsingError {
	UnknownCharacter(string character, Position span);
	Unexpected(sequence<TokenKind> expected, TokenKind found, Position span);
	Overflow(string literal, Position span);
	Underflow(string literal, Position span);
	EmptyLiteral(Position span);
	WrongNumArgs(string mnemonic,u16 expected, u16 given, Position opcode_span, Position args_span);
	KeywordDNE(string mnemonic, Position span);
};

enum TokenKind {
    "Eof",
    "Invalid",
    "Newline",
    "Ident",
    "Colon",
    "Semicolon",
    "Plus",
    "Minus",
    "Hash",
    "Number",
    "Keyword",
};


dictionary Position {
	u32 start;
	u32 end;
};

dictionary AssemblerConfig {
	sequence<Opcode> opcodes;
};

dictionary Opcode {
	string mnemonic;
	u8 binary;
	u32 num_args;
};