namespace Nand7400 {};

interface Assembler {
	constructor(AssemblerConfig config);
	void set_config(AssemblerConfig config);
	
	[Throws=AssemblerErrorCollection]
	bytes assemble([ByRef] string source);
};

[Error]
interface AssemblerErrorCollection {
	Errors(sequence<AssemblerError> errors);
};

[Error]
interface AssemblerError {
	Unexpected(sequence<string> negatives, sequence<string> positives, Position span);
	Overflow(string literal, Position span);
	WrongNumArgs(string mnemonic,u16 expected, u16 given, Position opcode_span, Position args_span);
	OpcodeDNE(string mnemonic, Position span);
	LabelDNE(string mnemonic, Position span);
};

dictionary Position {
	u32 start;
	u32 end;
};

interface Ast {
	u16 len();
	boolean is_empty();
	sequence<Statement> statements();
};

[Enum]
interface Statement {
	Literal(u8 value, Position span);
	Label(string name, Position span);
};

dictionary AssemblerConfig {
	sequence<Opcode> opcodes;
};

dictionary Opcode {
	string mnemonic;
	u8 binary;
	u32 num_args;
};